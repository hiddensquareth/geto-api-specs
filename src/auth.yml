openapi: 3.0.0
info:
  title: Auth
  description: API to manage authentication
  version: 1.0.0
components:
  schemas:
    DefaultResponse:
      type: object
      properties:
        message:
          type: string
          example: ok
    LoginUserWithLineRequestData:
      type: object
      required:
        - lineUserId
        - lineAccessToken
      properties:
        lineUserId:
          type: string
          minLength: 1
          maxLength: 1000
        lineAccessToken:
          type: string
          minLength: 1
          maxLength: 5000
    LoginUserWithLineReponseData:
      type: object
      required:
        - firebaseCustomToken
      properties:
        firebaseCustomToken:
          type: string
    LoginUserWithEmailRequestData:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          minLength: 1
          maxLength: 100
        password:
          type: string
          minLength: 1
          maxLength: 100
    LoginUserWithEmailReponseData:
      type: object
      required:
        - firebaseCustomToken
      properties:
        firebaseCustomToken:
          type: string
    InitiateLoginCmsRequestData:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          minLength: 1
          maxLength: 100
        password:
          type: string
          minLength: 1
          maxLength: 100
    InitiateLoginCmsResponseData:
      type: object
      required:
        - temporaryToken
      properties:
        temporaryToken:
          type: string
        qrCodeData:
          type: string
        firebaseCustomToken:
          type: string
    LoginCmsWithNewMfaRequestData:
      type: object
      required:
        - temporaryToken
        - otpCode
      properties:
        temporaryToken:
          type: string
          minLength: 1
          maxLength: 1000
        otpCode:
          type: string
          minLength: 1
          maxLength: 100
    LoginCmsWithNewMfaResponseData:
      type: object
      required:
        - firebaseCustomToken
      properties:
        firebaseCustomToken:
          type: string
    LoginCmsWithExistingMfaRequestData:
      type: object
      required:
        - temporaryToken
        - otpCode
      properties:
        temporaryToken:
          type: string
          minLength: 1
          maxLength: 1000
        otpCode:
          type: string
          minLength: 1
          maxLength: 100
    LoginCmsWithExistingMfaResponseData:
      type: object
      required:
        - firebaseCustomToken
      properties:
        firebaseCustomToken:
          type: string
    LinkUserWithOAuthProviderRequestData:
      type: object
      properties:
        token:
          type: string
          minLength: 1
          maxLength: 5000
        providerId:
          type: string
          minLength: 1
          maxLength: 50
        providerUserId:
          type: string
          minLength: 1
          maxLength: 100
    SendOtpRequestData:
      type: object
      required:
        - email
        - scope
      properties:
        email:
          type: string
          format: email
          pattern: '[^\.]+\.[^\.]+$'
          example: "maw-dev@littlepawcraft.com"
        scope:
          type: string
          minLength: 1
          maxLength: 100
    SendOtpResponseData:
      type: object
      required:
        - refToken
        - refCode
      properties:
        refToken:
          type: string
        refCode:
          type: string
    CheckOtpRequestData:
      type: object
      required:
        - otpCode
        - refToken
      properties:
        otpCode:
          type: string
          minLength: 1
          maxLength: 20
        refToken:
          type: string
          minLength: 1
          maxLength: 1000
    CheckOtpResponseData:
      type: object
      required:
        - grantToken
      properties:
        grantToken:
          type: string
    ResetPasswordRequestData:
      type: object
      required:
        - password
        - grantToken
      properties:
        password:
          type: string
          description: "Minimum eight characters, at least one letter, one number and one special character"
          pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[A-Za-z\d@$!%*?&]{8,20}$'
          example: P@ssw0rd
        grantToken:
          type: string
          minLength: 1
          maxLength: 1000

    DeviceInfo:
      type: object
      properties:
        os:
          type: string
          minLength: 0
          maxLength: 500
        userAgent:
          type: string
          minLength: 0
          maxLength: 500
        deviceName:
          type: string
          minLength: 0
          maxLength: 500
        deviceModel:
          type: string
          minLength: 0
          maxLength: 500
        deviceBrand:
          type: string
          minLength: 0
          maxLength: 500
    InitiateLogInUserByEmailRequestData:
      type: object
      required:
        - email
        - password
        - deviceId
        - deviceInfo
      properties:
        email:
          type: string
          minLength: 1
          maxLength: 500
        password:
          type: string
          minLength: 1
          maxLength: 500
        deviceId:
          type: string
          minLength: 1
          maxLength: 500
        deviceInfo:
          $ref: "#/components/schemas/DeviceInfo"

    InitiateLogInUserByEmailResponseData:
      type: object
      properties:
        temporaryToken:
          type: string
        firebaseCustomToken:
          type: string
        loginGrantToken:
          type: string

    InitiateLogInUserByOAuthProviderRequestData:
      type: object
      required:
        - providerUserId
        - providerAccessToken
        - providerId
        - deviceId
        - deviceInfo
      properties:
        providerUserId:
          type: string
          minLength: 1
          maxLength: 500
        providerAccessToken:
          type: string
          minLength: 1
          maxLength: 2000
        providerId:
          type: string
          minLength: 1
          maxLength: 500
        deviceId:
          type: string
          minLength: 1
          maxLength: 500
        deviceInfo:
          $ref: "#/components/schemas/DeviceInfo"

    InitiateLogInUserByOAuthProviderResponseData:
      type: object
      properties:
        temporaryToken:
          type: string
        firebaseCustomToken:
          type: string
        loginGrantToken:
          type: string
    SetUpPinCodeRequestData:
      type: object
      properties:
        pinCode:
          type: string
          pattern: "^[0-9]{6}$"
        temporaryToken:
          type: string
          minLength: 1
          maxLength: 1000
    SetUpPinCodeResponseData:
      type: object
      properties:
        firebaseCustomToken:
          type: string
    RefreshTokenWithPinCodeRequestData:
      type: object
      properties:
        userUuid:
          type: string
          minLength: 1
          maxLength: 50
        deviceId:
          type: string
          minLength: 1
          maxLength: 500
        pinCode:
          type: string
          pattern: "^[0-9]{6}$"

    RefreshTokenWithPinCodeResponseData:
      type: object
      properties:
        firebaseCustomToken:
          type: string
    ResetPinRequestData:
      type: object
      required:
        - newPinCode
        - deviceId
      properties:
        newPinCode:
          type: string
          pattern: "^[0-9]{6}$"
        deviceId:
          type: string
          minLength: 1
          maxLength: 500
    RemovePinRequestData:
      type: object
      required:
        - deviceId
      properties:
        deviceId:
          type: string
          minLength: 1
          maxLength: 500
    InitiateLoginUserByGrantTokenRequestData:
      type: object
      required:
        - loginGrantToken
      properties:
        loginGrantToken:
          type: string
          minLength: 1
          maxLength: 2000
    InitiateLoginUserByGrantTokenResponseData:
      type: object
      properties:
        temporaryToken:
          type: string
        firebaseCustomToken:
          type: string

paths:
  /auth/loginUserWithLine:
    post:
      tags:
        - auth
      summary: loginUserWithLine
      description: loginUserWithLine
      operationId: loginUserWithLine
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginUserWithLineRequestData"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginUserWithLineReponseData"
  /auth/linkUserWithOAuthProvider:
    post:
      tags:
        - auth
      summary: linkUserWithOAuthProvider
      description: linkUserWithOAuthProvider
      operationId: linkUserWithOAuthProvider
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LinkUserWithOAuthProviderRequestData"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultResponse"
  /auth/loginUserWithEmail:
    post:
      tags:
        - auth
      summary: loginUserWithEmail
      description: loginUserWithEmail
      operationId: loginUserWithEmail
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginUserWithEmailRequestData"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginUserWithEmailReponseData"
  /auth/initiateLoginCms:
    post:
      tags:
        - auth
      summary: initiateLoginCms
      description: initiateLoginCms
      operationId: initiateLoginCms
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InitiateLoginCmsRequestData"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InitiateLoginCmsResponseData"
  /auth/loginCmsWithNewMfa:
    post:
      tags:
        - auth
      summary: loginCmsWithNewMfa
      description: loginCmsWithNewMfa
      operationId: loginCmsWithNewMfa
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginCmsWithNewMfaRequestData"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginCmsWithNewMfaResponseData"
  /auth/loginCmsWithExistingMfa:
    post:
      tags:
        - auth
      summary: loginCmsWithExistingMfa
      description: loginCmsWithExistingMfa
      operationId: loginCmsWithExistingMfa
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginCmsWithExistingMfaRequestData"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginCmsWithExistingMfaResponseData"
  /auth/sendOtp:
    post:
      tags:
        - auth
      summary: sendOtp
      description: sendOtp
      operationId: sendOtp
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SendOtpRequestData"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SendOtpResponseData"
  /auth/checkOtp:
    post:
      tags:
        - auth
      summary: checkOtp
      description: checkOtp
      operationId: checkOtp
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CheckOtpRequestData"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CheckOtpResponseData"
  /auth/resetPassword:
    post:
      tags:
        - auth
      summary: resetPassword
      description: resetPassword
      operationId: resetPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResetPasswordRequestData"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultResponse"

  /auth/initiateLogInUserByEmail:
    post:
      tags:
        - auth
      summary: initiateLogInUserByEmail
      description: initiateLogInUserByEmail
      operationId: initiateLogInUserByEmail
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InitiateLogInUserByEmailRequestData"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InitiateLogInUserByEmailResponseData"

  /auth/initiateLogInUserByOAuthProvider:
    post:
      tags:
        - auth
      summary: initiateLogInUserByOAuthProvider
      description: initiateLogInUserByOAuthProvider
      operationId: initiateLogInUserByOAuthProvider
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InitiateLogInUserByOAuthProviderRequestData"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InitiateLogInUserByOAuthProviderResponseData"

  /auth/setUpPinCode:
    post:
      tags:
        - auth
      summary: setUpPinCode
      description: setUpPinCode
      operationId: setUpPinCode
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SetUpPinCodeRequestData"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SetUpPinCodeResponseData"

  /auth/refreshTokenWithPinCode:
    post:
      tags:
        - auth
      summary: refreshTokenWithPinCode
      description: refreshTokenWithPinCode
      operationId: refreshTokenWithPinCode
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefreshTokenWithPinCodeRequestData"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RefreshTokenWithPinCodeResponseData"
  /auth/removePin:
    post:
      tags:
        - auth
      summary: removePin
      description: removePin
      operationId: removePin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RemovePinRequestData"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultResponse"
  /auth/resetPin:
    post:
      tags:
        - auth
      summary: resetPin
      description: resetPin
      operationId: resetPin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResetPinRequestData"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultResponse"
  /auth/initiateLoginUserByGrantToken:
    post:
      tags:
        - auth
      summary: initiateLoginUserByGrantToken
      description: initiateLoginUserByGrantToken
      operationId: initiateLoginUserByGrantToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InitiateLoginUserByGrantTokenRequestData"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InitiateLoginUserByGrantTokenResponseData"
